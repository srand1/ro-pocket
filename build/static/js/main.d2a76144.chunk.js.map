{"version":3,"sources":["Msg.js","Room.js","App.js","reportWebVitals.js","index.js"],"names":["Unknown","props","tag","JSON","stringify","msg","Ignore","Msg","flow","adminServer","from","fromClientType","custom","parse","messageType","deleted","Text","className","src","user","avatar","alt","pfUrl","nickName","text","PresentText","giftInfo","giftName","chatroomAddresses","Room","useState","chatroom","setChatroom","stageView","setStage","msgsView","setMsgs","onconnect","chatroomInfo","console","log","onwillreconnect","args","ondisconnect","onerror","onmsgs","msgs","msgsPrev","Set","filter","map","targetId","name","onClick","window","SDK","chatroomNew","Chatroom","getInstance","appKey","isAnonymous","chatroomNick","chatroomId","roomId","getHistoryMsgs","timetag","time","done","err","obj","reverse","has","idClient","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2a76144.chunk.js","sourcesContent":["import './Msg.css';\n\nconst Unknown = props => <div>Unknown {props.tag}: {JSON.stringify(props.msg)}</div>;\nconst Ignore = props => <div>(Ignored {props.tag})</div>\n\nexport const Msg = props => {\n\tif (props.msg.flow !== 'in') {\n\t\treturn <Unknown tag={'flow'} msg={props.msg} />;\n\t}\n\tlet adminServer = false;\n\tif (props.msg.from === 'admin' || props.msg.fromClientType === 'Server') {\n\t\tif (!(props.msg.from === 'admin' && props.msg.fromClientType === 'Server')) {\n\t\t\treturn <Unknown tag={'adminServer'} msg={props.msg} />;\n\t\t}\n\t\tadminServer = true;\n\t}\n\tif (!props.msg.custom) {\n\t\treturn <Unknown tag={'custom'} msg={props.msg} />;\n\t}\n\tconst custom = JSON.parse(props.msg.custom);\n\tif (custom.messageType === 'TEXT') {\n\t\treturn <Text msg={props.msg} custom={custom} deleted={props.deleted} />;\n\t}\n\tif (adminServer && custom.messageType === 'PRESENT_NORMAL') {\n\t\treturn <Ignore tag={'adminServer PRESENT_NORMAL'} />;\n\t}\n\tif (adminServer && custom.messageType === 'DELETE') {\n\t\treturn <Ignore tag={'adminServer DELETE'} />;\n\t}\n\tif (custom.messageType === 'PRESENT_TEXT') {\n\t\treturn <PresentText msg={props.msg} custom={custom} />;\n\t}\n\treturn <div>{JSON.stringify({...props.msg, custom})}</div>;\n};\n\nconst Text = props => {\n\treturn (\n\t\t<div className={props.deleted?'deleted':''}>\n\t\t\t<img className=\"avatar\" src={`https://source.48.cn${props.custom.user?.avatar}`} alt=\"\" />\n\t\t\t{(props.custom.user?.pfUrl)?(<img className=\"avatar-overlay\" src={`https://source.48.cn${props.custom.user?.pfUrl}`} alt=\"\" />):null}\n\t\t\t{props.custom.user?.nickName}<br />\n\t\t\t{props.custom.text}\n\t\t</div>\n\t);\n};\nconst PresentText = props => {\n\treturn (\n\t\t<div>\n\t\t\t{props.custom.user?.nickName}<br />\n\t\t\t{props.custom.giftInfo?.giftName}\n\t\t</div>\n\t);\n};\n","import { useState } from 'react';\nimport { Msg } from './Msg';\n\nconst appKey = '632feff1f4c838541ab75195d1ceb3fa';\nconst chatroomAddresses = ['chatweblink01.netease.im:443'];\n\nexport const Room = props => {\n\tconst [chatroom, setChatroom] = useState(null);\n\tconst [stageView, setStage] = useState('OFFLINE');\n\tconst [msgsView, setMsgs] = useState([]);\n\n\tconst debug = () => {\n\t\tconsole.log(window.SDK);\n\t\tconsole.log(chatroom);\n\t\tconsole.log(msgsView);\n\t\tconsole.log(deleted);\n\t};\n\n\tconst init = () => {\n\t\tconst chatroomNew = window.SDK.Chatroom.getInstance({\n\t\t\tappKey,\n\t\t\tisAnonymous: true,\n\t\t\tchatroomNick: 'RO',\n\t\t\t// account: account,\n\t\t\t// token: account,\n\t\t\tchatroomId: props.roomId,\n\t\t\tchatroomAddresses,\n\t\t\tonconnect,\n\t\t\tonwillreconnect,\n\t\t\tondisconnect,\n\t\t\tonerror,\n\t\t\tonmsgs,\n\t\t});\n\t\tsetChatroom(chatroomNew);\n\t};\n\tconst onconnect = chatroomInfo => {\n\t\tsetStage('ONLINE');\n\t\tconsole.log('ONLINE', chatroomInfo);\n\t};\n\tconst onwillreconnect = (...args) => { console.log('r', args); };\n\tconst ondisconnect = (...args) => { console.log('d', args); };\n\tconst onerror = (...args) => { console.log('e', args); };\n\tconst onmsgs = msgs => {\n\t\tsetMsgs(msgsPrev => [...msgsPrev, ...msgs]);\n\t\tconsole.log(msgs);\n\t};\n\tconst earlier = () => {\n\t\tchatroom.getHistoryMsgs({\n\t\t\ttimetag: msgsView[0]?.time,\n\t\t\tdone: (err, obj) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tobj.msgs.reverse();\n\t\t\t\tsetMsgs(msgsPrev => [...obj.msgs, ...msgsPrev]);\n\t\t\t},\n\t\t});\n\t};\n\n\tconst deleted = new Set(msgsView.filter(\n\t\tmsg => JSON.parse(msg.custom || null)?.messageType === 'DELETE'\n\t).map(msg => JSON.parse(msg.custom).targetId));\n\n\treturn (\n\t\t<div>\n\t\t\t<header>{props.name}</header>\n\t\t\t<button onClick={debug}>Debug</button>\n\t\t\t{stageView}\n\t\t\t<button onClick={init}>Init</button>\n\t\t\t<button onClick={earlier}>Earlier</button>\n\t\t\t<div>\n\t\t\t\t{msgsView.map(msg => (\n\t\t\t\t\t<Msg key={msg.idClient} msg={msg} deleted={deleted.has(msg.idClient)}/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import './App.css';\nimport { Room } from './Room';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Room roomId={'67362271'} name={'Foo'} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}