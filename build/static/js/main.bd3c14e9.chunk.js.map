{"version":3,"sources":["Msg.js","Room.js","App.js","reportWebVitals.js","index.js"],"names":["Unknown","props","tag","JSON","stringify","msg","Ignore","Template","className","deleted","src","user","avatar","alt","pfUrl","nickName","children","Msg","flow","adminServer","from","fromClientType","custom","messageType","type","Text","text","PresentText","giftInfo","giftNum","giftName","ExpressImage","emotionRemote","Reply","replyName","replyText","Image","file","url","chatroomAddresses","Room","useState","chatroom","setChatroom","stageView","setStage","msgsView","setMsgs","onconnect","chatroomInfo","console","log","onwillreconnect","args","ondisconnect","onerror","onmsgs","msgs","msgsPrev","msgsSanitized","sanitizeDelta","msgsParsed","filter","resend","map","parse","byKey","Map","idx","idClient","lookup","get","dups","undefined","idxEx","length","Set","targetId","name","onClick","window","SDK","chatroomNew","Chatroom","getInstance","appKey","isAnonymous","chatroomNick","chatroomId","roomId","getHistoryMsgs","timetag","time","done","err","obj","reverse","has","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd3c14e9.chunk.js","sourcesContent":["import './Msg.css';\n\nconst Unknown = props => <div>Unknown {props.tag}: {JSON.stringify(props.msg)}</div>;\nconst Ignore = props => <div>(Ignored {props.tag})</div>\n\nconst Template = props => (\n\t<div className={props.deleted?'deleted':''}>\n\t\t<img className=\"avatar\" src={`https://source.48.cn${props.user?.avatar}`} alt=\"\" />\n\t\t{(props.user?.pfUrl)?(<img className=\"avatar-overlay\" src={`https://source.48.cn${props.user?.pfUrl}`} alt=\"\" />):null}\n\t\t{props.user?.nickName}<br />\n\t\t{props.children}\n\t</div>\n);\n\nexport const Msg = props => {\n\tif (props.msg.flow !== 'in') {\n\t\treturn <Unknown tag={'flow'} msg={props.msg} />;\n\t}\n\tlet adminServer = false;\n\tif (props.msg.from === 'admin' || props.msg.fromClientType === 'Server') {\n\t\tif (!(props.msg.from === 'admin' && props.msg.fromClientType === 'Server')) {\n\t\t\treturn <Unknown tag={'adminServer'} msg={props.msg} />;\n\t\t}\n\t\tadminServer = true;\n\t}\n\tif (!props.msg.custom) {\n\t\treturn <Unknown tag={'custom'} msg={props.msg} />;\n\t}\n\tconst custom = props.msg.custom;\n\tif (custom.messageType === 'TEXT') {\n\t\treturn <Text msg={props.msg} custom={custom} deleted={props.deleted} />;\n\t}\n\tif (adminServer && custom.messageType === 'PRESENT_NORMAL') {\n\t\treturn <Ignore tag={'adminServer PRESENT_NORMAL'} />;\n\t}\n\tif (adminServer && custom.messageType === 'PRESENT_FULLSCREEN') {\n\t\treturn <Ignore tag={'adminServer PRESENT_FULLSCREEN'} />;\n\t}\n\tif (adminServer && custom.messageType === 'RECIEVE_GIFT_EVENT') {\n\t\treturn <Ignore tag={'adminServer RECIEVE_GIFT_EVENT'} />;\n\t}\n\tif (adminServer && custom.messageType === 'DELETE') {\n\t\treturn <Ignore tag={'adminServer DELETE'} />;\n\t}\n\tif (custom.messageType === 'PRESENT_TEXT') {\n\t\treturn <PresentText msg={props.msg} custom={custom} />;\n\t}\n\tif (custom.messageType === 'EXPRESSIMAGE') {\n\t\treturn <ExpressImage msg={props.msg} custom={custom} />;\n\t}\n\tif (custom.messageType === 'REPLY') {\n\t\treturn <Reply msg={props.msg} custom={custom} />;\n\t}\n\tif (props.msg.type === 'image') {\n\t\treturn <Image msg={props.msg} custom={custom} />;\n\t}\n\treturn <div>{JSON.stringify(props.msg)}</div>;\n};\n\nconst Text = props => {\n\treturn (\n\t\t<Template user={props.custom.user} deleted={props.deleted}>\n\t\t\t{props.custom.text}\n\t\t</Template>\n\t);\n};\nconst PresentText = props => {\n\treturn (\n\t\t<Template user={props.custom.user} deleted={props.deleted}>\n\t\t\tSent {props.custom.giftInfo?.giftNum}x {props.custom.giftInfo?.giftName}\n\t\t</Template>\n\t);\n};\nconst ExpressImage = props => {\n\treturn (\n\t\t<Template user={props.custom.user} deleted={props.deleted}>\n\t\t\t<img src={props.custom.emotionRemote} alt=\"\" />\n\t\t</Template>\n\t);\n};\nconst Reply = props => {\n\treturn (\n\t\t<Template user={props.custom.user} deleted={props.deleted}>\n\t\t\t{props.custom.text}\n\t\t\t<blockquote>{props.custom.replyName}: {props.custom.replyText}</blockquote>\n\t\t</Template>\n\t);\n};\nconst Image = props => {\n\treturn (\n\t\t<Template user={props.custom.user} deleted={props.deleted}>\n\t\t\t<img src={props.msg.file.url} alt=\"\" />\n\t\t</Template>\n\t);\n};\n","import { useState } from 'react';\nimport { Msg } from './Msg';\n\nconst appKey = '632feff1f4c838541ab75195d1ceb3fa';\nconst chatroomAddresses = ['chatweblink01.netease.im:443'];\n\nexport const Room = props => {\n\tconst [chatroom, setChatroom] = useState(null);\n\tconst [stageView, setStage] = useState('OFFLINE');\n\tconst [msgsView, setMsgs] = useState([]);\n\n\tconst debug = () => {\n\t\tconsole.log(window.SDK);\n\t\tconsole.log(chatroom);\n\t\tconsole.log(msgsView);\n\t\tconsole.log(deleted);\n\t};\n\n\tconst init = () => {\n\t\tconst chatroomNew = window.SDK.Chatroom.getInstance({\n\t\t\tappKey,\n\t\t\tisAnonymous: true,\n\t\t\tchatroomNick: 'RO',\n\t\t\t// account: account,\n\t\t\t// token: account,\n\t\t\tchatroomId: props.roomId,\n\t\t\tchatroomAddresses,\n\t\t\tonconnect,\n\t\t\tonwillreconnect,\n\t\t\tondisconnect,\n\t\t\tonerror,\n\t\t\tonmsgs,\n\t\t});\n\t\tsetChatroom(chatroomNew);\n\t};\n\tconst onconnect = chatroomInfo => {\n\t\tsetStage('ONLINE');\n\t\tconsole.log('ONLINE', chatroomInfo);\n\t};\n\tconst onwillreconnect = (...args) => { console.log('r', args); };\n\tconst ondisconnect = (...args) => { console.log('d', args); };\n\tconst onerror = (...args) => { console.log('e', args); };\n\tconst onmsgs = msgs => {\n\t\tsetMsgs(msgsPrev => {\n\t\t\tconst msgsSanitized = sanitizeDelta(msgs, msgsPrev, 'dupNew');\n\t\t\treturn [...msgsPrev, ...msgsSanitized];\n\t\t});\n\t\tconsole.log(msgs);\n\t};\n\tconst sanitizeDelta = (msgs, msgsPrev, tag) => {\n\t\tconst msgsNoResend = msgs.filter(msg => !msg.resend);\n\t\tconst msgsParsed = msgsNoResend.map(msg => ({\n\t\t\t...msg,\n\t\t\tcustom: JSON.parse(msg.custom || null),\n\t\t}));\n\t\t// Mostly unnecessary after `resend` check.\n\t\t// But consecutive button clicks can send dup requests.\n\t\tconst byKey = new Map(msgsPrev.map((msg, idx) => [msg.idClient, idx]));\n\t\tconst lookup = msgsParsed.map((msg, idx) => [idx, msg, byKey.get(msg.idClient)]);\n\t\tconst dups = lookup.filter(\n\t\t\t([idx, msg, idxEx]) => idxEx !== undefined\n\t\t).map(\n\t\t\t([idx, msg, idxEx]) => [idx, msg, idxEx, msgsPrev[idxEx]]\n\t\t);\n\t\tif (dups.length > 0) console.log(tag, dups);\n\t\tconst msgsNoDup = lookup.filter(\n\t\t\t([idx, msg, idxEx]) => idxEx === undefined\n\t\t).map(\n\t\t\t([idx, msg, idxEx]) => msg\n\t\t);\n\t\treturn msgsNoDup;\n\t};\n\tconst earlier = () => {\n\t\tchatroom.getHistoryMsgs({\n\t\t\ttimetag: msgsView[0]?.time,\n\t\t\tdone: (err, obj) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst msgs = [...obj.msgs];\n\t\t\t\tmsgs.reverse();\n\t\t\t\tsetMsgs(msgsPrev => {\n\t\t\t\t\tconst msgsSanitized = sanitizeDelta(msgs, msgsPrev, 'dupHist');\n\t\t\t\t\treturn [...msgsSanitized, ...msgsPrev];\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t};\n\n\tconst deleted = new Set(msgsView.filter(\n\t\tmsg => msg.custom?.messageType === 'DELETE'\n\t).map(msg => msg.custom.targetId));\n\n\treturn (\n\t\t<div>\n\t\t\t<header>{props.name}</header>\n\t\t\t<button onClick={debug}>Debug</button>\n\t\t\t{stageView}\n\t\t\t<button onClick={init}>Init</button>\n\t\t\t<button onClick={earlier}>Earlier</button>\n\t\t\t<div>\n\t\t\t\t{msgsView.map(msg => (\n\t\t\t\t\t<div key={msg.idClient} className=\"each\" onClick={() => console.log(msg)}>\n\t\t\t\t\t\t<Msg msg={msg} deleted={deleted.has(msg.idClient)}/>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import './App.css';\nimport { Room } from './Room';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Room roomId={'67362271'} name={'Foo'} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}